{"version":3,"sources":["components/Breweries.js","components/NotFound.js","components/Form.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Breweries","props","queryParser","query","undefined","replace","className","brewery","name","street","id","onClick","evt","document","body","classList","remove","style","backgroundImage","process","backgroundSize","backgroundAttachment","city","state","postal_code","NotFound","apiBase","Form","useState","search","setSearch","setQuery","setBrewery","type","value","onChange","ev","target","checked","placeholder","onKeyPress","key","getElementById","toggle","add","fetch","then","res","json","result","length","map","Navbar","App","Boolean","window","location","hostname","match","require","config","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fc3b2c3f.chunk.js","sourcesContent":["import React, {useState} from \"react\"\r\n\r\nfunction Breweries(props) {\r\n    function handleClick(evt) {\r\n        document.body.classList.remove(\"found\")\r\n        document.body.style.backgroundImage = `url(https://maps.googleapis.com/maps/api/staticmap?center=${queryParser(props.brewery.street)}&zoom=13&markers=color:red%7Clabel%7C${queryParser(props.brewery.street)}&size=2560x1440&key=${process.env.REACT_APP_API_KEY})`\r\n        document.body.style.backgroundSize = \"contain\"\r\n        document.body.style.backgroundAttachment = \"fixed\"\r\n    }\r\n\r\n    function queryParser(query) {\r\n        if(query !== undefined) {\r\n            query = query.replace(/ /g, '+')\r\n            return query\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"flex\">\r\n            <div className=\"brewery\">\r\n                {\r\n                    props.brewery.name === \"\" ?\r\n                    <h3>Name not found</h3> : <h3>{props.brewery.name}</h3>\r\n                }\r\n                {\r\n                    props.brewery.street === \"\" ?\r\n                    <p>Address not found</p> \r\n                    : \r\n                    <div \r\n                        id=\"location\"\r\n                        onClick={handleClick}    \r\n                    >\r\n                            <span>{props.brewery.street}</span>\r\n                            &ensp;\r\n                            <i className=\"fas fa-map-marker-alt\"></i>\r\n                    </div>\r\n                }\r\n                {\r\n                    (props.brewery.city === \"\" || props.brewery.state === \"\" || props.brewery.postal_code === \"\") ?\r\n                    <p>Location not found</p> : (<p>{props.brewery.city}, {props.brewery.state} {props.brewery.postal_code}</p>)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Breweries","import React from \"react\"\r\n\r\nfunction NotFound() {\r\n    return(\r\n            <div className=\"flex notFound\">\r\n                <p>We could not find any breweries for this query!</p>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default NotFound","import React, {useState} from 'react'\r\nimport Breweries from \"./Breweries\"\r\nimport NotFound from \"./NotFound\"\r\n\r\nconst apiBase = {\r\n                    city:\"https://api.openbrewerydb.org/breweries?by_city=\",\r\n                    state:\"https://api.openbrewerydb.org/breweries?by_state=\",\r\n                    name:\"https://api.openbrewerydb.org/breweries?by_name=\"\r\n                }\r\n\r\nfunction Form() {\r\n\r\n    const [search, setSearch] = useState(\"city\")\r\n    const [query, setQuery] = useState(\"\")\r\n    const[brewery, setBrewery] = useState({})\r\n\r\n    function handleChange(evt) {\r\n        if(evt.key === \"Enter\") {\r\n                document.getElementById(\"inputDiv\").classList.toggle(\"fadeOut\")\r\n                document.body.classList.add(\"found\") \r\n                fetch(`${apiBase[search]}${query}`)\r\n                    .then(res => res.json())\r\n                    .then(result => {\r\n                        setBrewery(result)\r\n                        setQuery(\"\")\r\n                    })   \r\n                }\r\n    }\r\n\r\n    return(\r\n        <div className=\"container\">\r\n             <div id=\"inputDiv\">\r\n                <div id=\"radioButtons\">\r\n                    <label>\r\n                        City:\r\n                        <input type=\"radio\" name=\"search\" value=\"city\" onChange={ev=> setSearch(ev.target.value)} checked={search === \"city\"} />\r\n                    </label>\r\n                    &nbsp;\r\n                    <label>\r\n                        State:\r\n                        <input type=\"radio\" name=\"search\" value=\"state\" onChange={ev=> setSearch(ev.target.value)} checked={search === \"state\"} />\r\n                    </label>\r\n                    &nbsp;\r\n                    <label>\r\n                        Name:\r\n                        <input type=\"radio\" name=\"search\" value=\"name\" onChange={ev=> setSearch(ev.target.value)} checked={search === \"name\"} />\r\n                    </label>\r\n                </div>\r\n                <input \r\n                    id=\"searchBar\"\r\n                    type=\"text\"\r\n                    name=\"query\"\r\n                    placeholder={`Search by ${search}...`}\r\n                    onChange={ev => setQuery(ev.target.value)}\r\n                    onKeyPress={handleChange}\r\n                    value={query}\r\n                />\r\n            </div>\r\n            {(brewery.length !== undefined) &&\r\n                (brewery.length !== 0 ?\r\n                    brewery.map(brewery => (\r\n                        <Breweries brewery={brewery} />\r\n                    ))\r\n                     : \r\n                    <NotFound />\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form","import React from \"react\"\r\n\r\nfunction Navbar() {\r\n\r\n\r\nfunction handleClick() {\r\n    if(document.getElementById(\"inputDiv\") !== null) {\r\n        document.getElementById(\"inputDiv\").classList.toggle(\"fadeOut\");\r\n    }\r\n}\r\n\r\n    return(\r\n        <div id=\"navbar\">\r\n            <div></div>\r\n            <h1>BrewGuru</h1>\r\n            <i \r\n                className=\"fas fa-search\"\r\n                onClick={handleClick}\r\n            >\r\n            </i>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from \"react\"\nimport Form from \"./components/Form\"\nimport Navbar from \"./components/Navbar\"\n\nfunction App() {\n   \n\n    return (\n        <div>\n            <Navbar />\n            <Form /> \n        </div>\n        \n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config();\n\nReactDOM.render(<App />, document.getElementById('root'));\nif (module.hot) module.hot.accept()\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}