{"version":3,"sources":["components/NotFound.js","components/Map.js","components/Brewery.js","components/Breweries.js","components/Form.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["NotFound","className","Map","props","useState","center","setCenter","hasCenter","setHasCenter","useEffect","Geocode","setApiKey","process","setLanguage","centerHolder","lat","lng","console","log","Number","fromAddress","address","then","response","results","geometry","location","error","id","name","mapContainerStyle","height","width","zoom","position","onClick","document","getElementById","style","opacity","zIndex","Brewery","brewery","street","state","city","postal_code","latitude","longitude","showMap","setShowMap","value","Breweries","undefined","breweries","length","map","key","googleMapsApiKey","apiBase","Form","search","setSearch","query","setQuery","setBreweries","type","onChange","ev","target","checked","placeholder","onKeyPress","evt","classList","toggle","fetch","res","json","result","Navbar","App","Boolean","window","hostname","match","require","config","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.31ebc927.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction NotFound() {\r\n    return(\r\n            <div className=\"flex notFound\">\r\n                <p>We could not find any breweries for this query!</p>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default NotFound","import React, { useEffect, useState } from \"react\";\r\nimport { GoogleMap, Marker } from \"@react-google-maps/api\";\r\nimport Geocode from \"react-geocode\";\r\n\r\nfunction Map(props) {\r\n  const [center, setCenter] = useState({});\r\n  const [hasCenter, setHasCenter] = useState(false);\r\n\r\n  useEffect(() => {}, [setCenter]);\r\n\r\n  Geocode.setApiKey(process.env.REACT_APP_API_KEY);\r\n  Geocode.setLanguage(\"en\");\r\n\r\n  const mapStyles = {\r\n    height: \"100vh\",\r\n    width: \"100%\",\r\n  };\r\n\r\n  let centerHolder = {};\r\n\r\n  if (!hasCenter) {\r\n    if (!props.lat !== true && props.lng !== true) {\r\n      console.log(\"inside\");\r\n      centerHolder = {\r\n        lat: Number(props.lat),\r\n        lng: Number(props.lng),\r\n      };\r\n      setCenter(centerHolder);\r\n      setHasCenter(true);\r\n    } else {\r\n      console.log(\"onside\");\r\n      Geocode.fromAddress(props.address).then(\r\n        (response) => {\r\n          let { lat, lng } = response.results[0].geometry.location;\r\n          centerHolder = {\r\n            lat: Number(lat),\r\n            lng: Number(lng),\r\n          };\r\n          setCenter(centerHolder);\r\n          setHasCenter(true);\r\n        },\r\n        (error) => {\r\n          console.error(error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  console.log(center);\r\n\r\n  function handleClick() {\r\n    document.getElementById(props.name).style.opacity = \"0%\";\r\n    document.getElementById(props.name).style.zIndex = \"-999\";\r\n  }\r\n\r\n  return (\r\n    <div id={props.name} className=\"map\">\r\n      <GoogleMap mapContainerStyle={mapStyles} zoom={13} center={center}>\r\n        <Marker position={center} />\r\n      </GoogleMap>\r\n      <i className=\"fas fa-window-close\" onClick={handleClick}></i>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React, { useState } from \"react\";\r\nimport Map from \"./Map\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { render } from \"@testing-library/react\";\r\n\r\nfunction Brewery({\r\n  brewery: { name, street, state, city, postal_code, latitude, longitude },\r\n}) {\r\n  const [showMap, setShowMap] = useState(false);\r\n\r\n  function handleClick() {\r\n    if (document.getElementById(name)) {\r\n      document.getElementById(name).style.opacity = \"100%\";\r\n      document.getElementById(name).style.zIndex = \"2\";\r\n    }\r\n    setShowMap(true);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"brewery\">\r\n        {name === \"\" ? <h3>Name not found</h3> : <h3>{name}</h3>}\r\n        {street === \"\" ? (\r\n          <p>Address not found</p>\r\n        ) : (\r\n          <button id=\"location\" value=\"hello\" onClick={handleClick}>\r\n            <span>{street}</span>\r\n            &ensp;\r\n            <i className=\"fas fa-map-marker-alt\"></i>\r\n          </button>\r\n        )}\r\n        {city === \"\" || state === \"\" || postal_code === \"\" ? (\r\n          <p>Location not found</p>\r\n        ) : (\r\n          <p>\r\n            {city}, {state} {postal_code}\r\n          </p>\r\n        )}\r\n      </div>\r\n      {showMap && (\r\n        <Map name={name} lat={latitude} lng={longitude} address={street} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Brewery;\r\n","import React, { useState } from \"react\";\r\nimport NotFound from \"./NotFound\";\r\nimport Brewery from \"./Brewery\";\r\nimport { LoadScript } from \"@react-google-maps/api\";\r\n\r\nfunction Breweries(props) {\r\n  // function queryParser(query) {\r\n  //   if (query !== undefined) {\r\n  //     query = query.replace(/ /g, \"+\");\r\n  //     return query;\r\n  //   }\r\n  // }\r\n\r\n  return (\r\n    <div>\r\n      {props.breweries.length !== undefined &&\r\n        (props.breweries.length !== 0 ? (\r\n          props.breweries.map((brewery, key) => (\r\n            <LoadScript googleMapsApiKey={process.env.REACT_APP_API_KEY}>\r\n              <Brewery brewery={brewery} />\r\n            </LoadScript>\r\n          ))\r\n        ) : (\r\n          <NotFound />\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Breweries;\r\n","import React, { useState } from \"react\";\r\nimport Breweries from \"./Breweries\";\r\n\r\nconst apiBase = {\r\n  city: \"https://api.openbrewerydb.org/breweries?by_city=\",\r\n  state: \"https://api.openbrewerydb.org/breweries?by_state=\",\r\n  name: \"https://api.openbrewerydb.org/breweries?by_name=\",\r\n};\r\n\r\nfunction Form() {\r\n  const [search, setSearch] = useState(\"city\");\r\n  const [query, setQuery] = useState(\"\");\r\n  const [breweries, setBreweries] = useState({});\r\n\r\n  function handleChange(evt) {\r\n    if (evt.key === \"Enter\") {\r\n      document.getElementById(\"inputDiv\").classList.toggle(\"fadeOut\");\r\n      fetch(`${apiBase[search]}${query}`)\r\n        .then((res) => res.json())\r\n        .then((result) => {\r\n          setBreweries(result);\r\n          setQuery(\"\");\r\n        });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <div id=\"inputDiv\">\r\n          <div id=\"radioButtons\">\r\n            <label>\r\n              City\r\n              <input\r\n                type=\"radio\"\r\n                name=\"search\"\r\n                value=\"city\"\r\n                onChange={(ev) => setSearch(ev.target.value)}\r\n                checked={search === \"city\"}\r\n              />\r\n            </label>\r\n            &nbsp;\r\n            <label>\r\n              State\r\n              <input\r\n                type=\"radio\"\r\n                name=\"search\"\r\n                value=\"state\"\r\n                onChange={(ev) => setSearch(ev.target.value)}\r\n                checked={search === \"state\"}\r\n              />\r\n            </label>\r\n            &nbsp;\r\n            <label>\r\n              Name\r\n              <input\r\n                type=\"radio\"\r\n                name=\"search\"\r\n                value=\"name\"\r\n                onChange={(ev) => setSearch(ev.target.value)}\r\n                checked={search === \"name\"}\r\n              />\r\n            </label>\r\n          </div>\r\n          <input\r\n            id=\"searchBar\"\r\n            type=\"text\"\r\n            name=\"query\"\r\n            placeholder={`Search by ${search}...`}\r\n            onChange={(ev) => setQuery(ev.target.value)}\r\n            onKeyPress={handleChange}\r\n            value={query}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"breweryContainer\">\r\n        <Breweries breweries={breweries} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\"\r\n\r\nfunction Navbar() {\r\n\r\n\r\nfunction handleClick() {\r\n    if(document.getElementById(\"inputDiv\") !== null) {\r\n        document.getElementById(\"inputDiv\").classList.toggle(\"fadeOut\");\r\n    }\r\n}\r\n\r\n    return(\r\n        <div id=\"navbar\">\r\n            <div></div>\r\n            <h1>BrewGuru</h1>\r\n            <i \r\n                className=\"fas fa-search\"\r\n                onClick={handleClick}\r\n            >\r\n            </i>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from \"react\"\nimport Form from \"./components/Form\"\nimport Navbar from \"./components/Navbar\"\n\nfunction App() {\n   \n\n    return (\n        <div>\n            <Navbar />\n            <Form /> \n        </div>\n        \n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config();\n\nReactDOM.render(<App />, document.getElementById('root'));\nif (module.hot) module.hot.accept()\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}